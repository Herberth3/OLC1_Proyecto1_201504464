using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _LFP_Proyecto2
{
    class Token
    {
        public enum Tipo
        {
            RESERVADA_CLASS,
            RESERVADA_STATIC,
            RESERVADA_VOID,
            RESERVADA_INT,
            RESERVADA_FLOAT,
            RESERVADA_BOOL,
            RESERVADA_CHAR,
            RESERVADA_FALSE,
            RESERVADA_TRUE,
            RESERVADA_NEW,
            RESERVADA_CONSOLE,
            RESERVADA_WRITELINE,
            RESERVADA_GRAFICARVECTOR,
            RESERVADA_STRING,
            RESERVADA_IF,
            RESERVADA_ELSE,
            RESERVADA_SWITCH,
            RESERVADA_CASE,
            RESERVADA_BREAK,
            RESERVADA_DEFAULT,
            RESERVADA_FOR,
            RESERVADA_WHILE,
            PALABRA_VARIABLE,
            CADENA_STRING,
            CADENA_CHAR,
            COMENTARIO_LINEA,
            COMENTARIO_BLOQUE,
            NUMERO_ENTERO,
            NUMERO_FLOAT_ASIGNACION,
            NUMERO_FLOAT_OPERACION,
            LLAVE_IZQ,
            LLAVE_DER,
            COMA,
            PUNTO_Y_COMA,
            DOS_PUNTOS,
            SIGNO_IGUAL,
            CORCHETE_IZQ,
            CORCHETE_DER,
            PARENTESIS_IZQ,
            PARENTESIS_DER,
            SIGNO_MAS,
            SIGNO_MENOS,
            SIGNO_POR,
            SIGNO_DIVISION,
            SIGNO_MENOR_QUE,
            SIGNO_MAYOR_QUE,
            SIGNO_DIFERENTE_DE,
            PUNTO,
            SIGNO_AUMENTO,
            SIGNO_DECREMENTO,
            SIGNO_MAYOR_IGUAL_QUE,
            SIGNO_MENOR_IGUAL_QUE,
            SIGNO_IGUALACION,
            ULTIMO,
            DESCONOCIDO
        }

        private Tipo tipoToken;
        private string lexema;
        private int filaToken;
        private int columnaToken;

        public Token(Tipo tipo, string auxLex, int fila, int columna)
        {
            this.tipoToken = tipo;
            this.lexema = auxLex;
            this.filaToken = fila;
            this.columnaToken = columna;
        }

        public Tipo getTipo() { return tipoToken; }

        public string getLexema() { return lexema; }

        public int getFila() { return filaToken; }

        public int getColumna() { return columnaToken; }

        public string getTipoTokenEnString()
        {
            string nombreToken = "";

            switch (tipoToken)
            {
                case Tipo.RESERVADA_CLASS:
                    nombreToken = "ReservadaClass";
                    break;
                case Tipo.RESERVADA_STATIC:
                    nombreToken = "ReservadaStatic";
                    break;
                case Tipo.RESERVADA_VOID:
                    nombreToken = "ReservadaVoid";
                    break;
                case Tipo.RESERVADA_INT:
                    nombreToken = "ReservadaInt";
                    break;
                case Tipo.RESERVADA_FLOAT:
                    nombreToken = "ReservadaFloat";
                    break;
                case Tipo.RESERVADA_BOOL:
                    nombreToken = "ReservadaBool";
                    break;
                case Tipo.RESERVADA_CHAR:
                    nombreToken = "ReservadaChar";
                    break;
                case Tipo.RESERVADA_FALSE:
                    nombreToken = "ReservadaFalse";
                    break;
                case Tipo.RESERVADA_TRUE:
                    nombreToken = "ReservadaTrue";
                    break;
                case Tipo.RESERVADA_NEW:
                    nombreToken = "ReservadaNew";
                    break;
                case Tipo.RESERVADA_CONSOLE:
                    nombreToken = "ReservadaConsole";
                    break;
                case Tipo.RESERVADA_WRITELINE:
                    nombreToken = "ReservadaWriteLine";
                    break;
                case Tipo.RESERVADA_GRAFICARVECTOR:
                    nombreToken = "ReservadaGraficarVector";
                    break;
                case Tipo.RESERVADA_STRING:
                    nombreToken = "ReservadaString";
                    break;
                case Tipo.RESERVADA_IF:
                    nombreToken = "ReservadaIf";
                    break;
                case Tipo.RESERVADA_ELSE:
                    nombreToken = "ReservadaElse";
                    break;
                case Tipo.RESERVADA_SWITCH:
                    nombreToken = "ReservadaSwitch";
                    break;
                case Tipo.RESERVADA_CASE:
                    nombreToken = "ReservadaCase";
                    break;
                case Tipo.RESERVADA_BREAK:
                    nombreToken = "ReservadaBreak";
                    break;
                case Tipo.RESERVADA_DEFAULT:
                    nombreToken = "ReservadaDefault";
                    break;
                case Tipo.RESERVADA_FOR:
                    nombreToken = "ReservadaFor";
                    break;
                case Tipo.RESERVADA_WHILE:
                    nombreToken = "ReservadaWhile";
                    break;
                case Tipo.PALABRA_VARIABLE:
                    nombreToken = "PalabraVariable";
                    break;
                case Tipo.CADENA_STRING:
                    nombreToken = "CadenaString";
                    break;
                case Tipo.CADENA_CHAR:
                    nombreToken = "CadenaChar";
                    break;
                case Tipo.COMENTARIO_LINEA:
                    nombreToken = "ComentarioLinea";
                    break;
                case Tipo.COMENTARIO_BLOQUE:
                    nombreToken = "ComentarioBloque";
                    break;
                case Tipo.NUMERO_ENTERO:
                    nombreToken = "NumeroEntero";
                    break;
                case Tipo.NUMERO_FLOAT_ASIGNACION:
                    nombreToken = "NumeroFloatAsignacion";
                    break;
                case Tipo.NUMERO_FLOAT_OPERACION:
                    nombreToken = "NumeroFloatOperacion";
                    break;
                case Tipo.LLAVE_IZQ:
                    nombreToken = "LlaveIzquierda";
                    break;
                case Tipo.LLAVE_DER:
                    nombreToken = "LlaveDerecha";
                    break;
                case Tipo.COMA:
                    nombreToken = "Coma";
                    break;
                case Tipo.PUNTO_Y_COMA:
                    nombreToken = "PuntoYcoma";
                    break;
                case Tipo.DOS_PUNTOS:
                    nombreToken = "DosPuntos";
                    break;
                case Tipo.SIGNO_IGUAL:
                    nombreToken = "SignoIgual";
                    break;
                case Tipo.CORCHETE_IZQ:
                    nombreToken = "CorcheteIzquierdo";
                    break;
                case Tipo.CORCHETE_DER:
                    nombreToken = "CorcheteDerecho";
                    break;
                case Tipo.PARENTESIS_IZQ:
                    nombreToken = "ParentesisIzquierdo";
                    break;
                case Tipo.PARENTESIS_DER:
                    nombreToken = "ParentesisDerecho";
                    break;
                case Tipo.SIGNO_MAS:
                    nombreToken = "SignoMas";
                    break;
                case Tipo.SIGNO_MENOS:
                    nombreToken = "SignoMenos";
                    break;
                case Tipo.SIGNO_POR:
                    nombreToken = "SignoPor";
                    break;
                case Tipo.SIGNO_DIVISION:
                    nombreToken = "SignoDivision";
                    break;
                case Tipo.SIGNO_MENOR_QUE:
                    nombreToken = "SignoMenorQue";
                    break;
                case Tipo.SIGNO_MAYOR_QUE:
                    nombreToken = "SignoMayorQue";
                    break;
                case Tipo.SIGNO_DIFERENTE_DE:
                    nombreToken = "SignoDiferenteDe";
                    break;
                case Tipo.PUNTO:
                    nombreToken = "Punto";
                    break;
                case Tipo.SIGNO_AUMENTO:
                    nombreToken = "SignoAumento";
                    break;
                case Tipo.SIGNO_DECREMENTO:
                    nombreToken = "SignoDecremento";
                    break;
                case Tipo.SIGNO_MAYOR_IGUAL_QUE:
                    nombreToken = "SignoMayorIgualQue";
                    break;
                case Tipo.SIGNO_MENOR_IGUAL_QUE:
                    nombreToken = "SignoMenorIgualQue";
                    break;
                case Tipo.SIGNO_IGUALACION:
                    nombreToken = "SignoIgualacion";
                    break;
                default:
                    nombreToken = "Desconocido";
                    break;
            }
            return nombreToken;
        }
    }
}

RESERVADA_VAR = 1
    RESERVADA_INT = 2
    RESERVADA_STRING = 3
    RESERVADA_CHAR = 4
    RESERVADA_BOOLEAN = 5
    RESERVADA_IF = 6
    RESERVADA_ELSE = 7
    RESERVADA_FOR = 8
    RESERVADA_WHILE = 9
    RESERVADA_DO = 10
    RESERVADA_CONTINUE = 11
    RESERVADA_BREAK = 12
    RESERVADA_RETURN = 13
    RESERVADA_CONTRUCTOR = 14
    RESERVADA_FUNCTION = 15
    RESERVADA_CLASS = 16
    RESERVADA_MATH = 17
    RESERVADA_POW = 18
    RESERVADA_TRUE = 19
    RESERVADA_FALSE = 20
    VARIABLE = 21
    NUMERO_ENTERO = 22
    NUMERO_DECIMAL = 23
    COMENTARIO_LINEA = 24
    COMENTARIO_BLOQUE = 25
    CADENA_STRING = 26
    SIGNO_AND = 27
    SIGNO_OR = 28
    SIGNO_POS_INCREMENTO = 29
    SIGNO_POS_DECREMENTO = 30
    SIGNO_SUMA_CONCATENADA = 31
    SIGNO_RESTA_CONCATENADA = 32
    SIGNO_LAMBDA = 33
    SIGNO_IGUAL = 34
    SIGNO_DOBLE_IGUAL = 35
    SIGNO_MENOR_QUE = 36
    SIGNO_MAYOR_QUE = 37
    SIGNO_DIFERENTE_DE = 38
    SIGNO_NEGACION = 39
    SIGNO_ASIGNACION = 40
    SIGNO_MAS = 41
    SIGNO_MENOS = 42
    SIGNO_POR = 43
    SIGNO_DIVISION = 44
    LLAVE_IZQ = 45
    LLAVE_DER = 46
    PARENTESIS_IZQ = 47
    PARENTESIS_DER = 48
    COMA = 49
    PUNTO_Y_COMA = 50
    DOS_PUNTOS = 51
    PUNTO = 52
    DESCONOCIDO = 53
