using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static _OLC1_Proyecto1.Token;
using static _OLC1_Proyecto1.Token_Error;

namespace _OLC1_Proyecto1
{
    class Analizador_Lexico
    {
        int estado;
        string auxLexema;
        string textoDocumento;
        private List<Token> LSalidaTokens;
        private List<Token_Error> LErroresTokens;

        public List<Token> analizador(string textoDocumento)
        {
            estado = 0;
            auxLexema = "";
            this.textoDocumento = textoDocumento + "#";
            LSalidaTokens = new List<Token>();
            LErroresTokens = new List<Token_Error>();
            char c = ' ';
            int columnaToken = 0, filaToken = 1;
            char[] arrayCharDocumento = this.textoDocumento.ToCharArray(0, this.textoDocumento.Length);

            for (int i = 0; i < this.textoDocumento.Length; i++)
            {
                c = arrayCharDocumento[i];
                columnaToken++;

                switch (estado)
                {
                    case 0:
                        if (char.IsLetter(c))
                        {
                            estado = 1;
                            auxLexema += c;
                        }
                        else if (char.IsDigit(c))
                        {
                            estado = 2;
                            auxLexema += c;
                        }// Todos los simbolos del ascii 33 hasta el 125 excepto por las letras, nÃºmeros, ", /, <, -, \, [, espacio
                        else if (c == 33 | (c >= 35 && c <= 44) | c == 46 | c == 58 |c == 59 | (c >= 61 && c <= 64) | (c >= 93 && c <= 96) | (c >= 123 && c <= 126))
                        {
                            estado = 3;
                            auxLexema += c;
                        }
                        else if (c == 34)// "
                        {
                            estado = 4;
                            auxLexema += c;
                        }
                        else if (c == 47)// /
                        {
                            estado = 5;
                            auxLexema += c;
                        }
                        else if (c == 60)// <
                        {
                            estado = 6;
                            auxLexema += c;
                        }
                        else if (c == 45)// -
                        {
                            estado = 7;
                            auxLexema += c;
                        }
                        else if (c == 92)// \
                        {
                            estado = 8;
                            auxLexema += c;
                        }
                        else if (c == 91)// [
                        {
                            estado = 9;
                            auxLexema += c;
                        }
                        else if (c == 32 | c == 9 | (c == 35 && i == arrayCharDocumento.Length - 1) | c == 10)//espacio | tab horizonal | ultimo '#' | nueva linea
                        {
                            if (c == 32 | c == 9 | c == 35)// espacio | tabHorizontal | #
                            {
                                estado = 0;
                            }
                            else if (c == 10)// nueva linea
                            {
                                estado = 0;
                                columnaToken = 0;
                                filaToken++;
                            }
                        }
                        else
                        {
                            addTokenError(c.ToString(), TipoError.LEXICO, "El simbolo no pertenece al lenguaje", filaToken, columnaToken);
                            columnaToken--;
                        }
                        break;
                    case 1:
                        if (char.IsLetter(c))
                        {
                            estado = 1;
                            auxLexema += c;
                        }
                        else if (char.IsDigit(c))
                        {
                            estado = 1;
                            auxLexema += c;
                        }
                        else if (c == 95)// _
                        {
                            estado = 1;
                            auxLexema += c;
                        }
                        else
                        {
                            if (auxLexema == "CONJ")
                            {
                                addToken(Tipo.RESERVADA_CONJ, filaToken, columnaToken - auxLexema.Length);
                            }
                            else
                            {
                                addToken(Tipo.IDENTIFICADOR, filaToken, columnaToken - auxLexema.Length);
                            }
                            i--;
                            columnaToken--;
                        }
                        break;
                    case 2:
                        if (char.IsDigit(c))
                        {
                            estado = 2;
                            auxLexema += c;
                        }
                        else
                        {
                            addToken(Tipo.NUMERO_ENTERO, filaToken, columnaToken - auxLexema.Length);
                            i--;
                            columnaToken--;
                        }
                        break;
                    case 3:
                        addToken(Tipo.SIMBOLO, filaToken, columnaToken - auxLexema.Length);
                        i--;
                        columnaToken--;
                        break;
                    case 4:
                        estado = 10;
                        auxLexema += c;
                        break;
                    case 5:
                        if (c == 47)// /
                        {
                            estado = 11;
                            auxLexema += c;
                        }
                        else
                        {
                            addToken(Tipo.SIMBOLO, filaToken, columnaToken - auxLexema.Length);
                            i--;
                            columnaToken--;
                        }
                        break;
                    case 6:
                        if (c == 33)// !
                        {
                            estado = 12;
                            auxLexema += c;
                        }
                        else
                        {
                            addToken(Tipo.SIMBOLO, filaToken, columnaToken - auxLexema.Length);
                            i--;
                            columnaToken--;
                        }
                        break;
                    case 7:
                        if (c == 62)// >
                        {
                            estado = 13;
                            auxLexema += c;
                        }
                        else
                        {
                            addToken(Tipo.SIMBOLO, filaToken, columnaToken - auxLexema.Length);
                            i--;
                            columnaToken--;
                        }
                        break;
                    case 8:
                        if (c == 110 | c == 116 | c == 34 | c == 39)// n, t, ", '
                        {
                            estado = 14;
                            auxLexema += c;
                        }
                        else
                        {
                            addToken(Tipo.SIMBOLO, filaToken, columnaToken - auxLexema.Length);
                            i--;
                            columnaToken--;
                        }
                        break;
                    case 9:
                        if (c == 58)// :
                        {
                            estado = 15;
                            auxLexema += c;
                        }
                        else
                        {
                            addToken(Tipo.SIMBOLO, filaToken, columnaToken - auxLexema.Length);
                            i--;
                            columnaToken--;
                        }
                        break;
                    case 10:
                        if (c == 34)// "
                        {
                            estado = 16;
                            auxLexema += c;
                        }
                        else
                        {
                            estado = 10;
                            auxLexema += c;
                        }
                        break;
                    case 11:
                        if (c == 10)// nueva linea
                        {
                            estado = 17;
                            columnaToken--;
                        }
                        else
                        {
                            estado = 11;
                            auxLexema += c;
                        }
                        break;
                    case 12:
                        if (c == 33)// !
                        {
                            estado = 18;
                            auxLexema += c;
                        }
                        else
                        {
                            if (c == 10)// salto linea
                            {
                                filaToken++;
                            }
                            estado = 12;
                            auxLexema += c;
                        }
                        break;
                    case 13:
                        addToken(Tipo.ASIGNACION, filaToken, columnaToken - auxLexema.Length);
                        i--;
                        columnaToken--;
                        break;
                    case 14:
                        addToken(Tipo.CARACTER_ESPECIAL, filaToken, columnaToken - auxLexema.Length);
                        i--;
                        columnaToken--;
                        break;
                    case 15:
                        estado = 19;
                        auxLexema += c;
                        break;
                    case 16:
                        addToken(Tipo.CADENA_STRING, filaToken, columnaToken - auxLexema.Length);
                        i--;
                        columnaToken--;
                        break;
                    case 17:
                        addToken(Tipo.COMENTARIO_LINEA, filaToken, columnaToken - auxLexema.Length);
                        columnaToken = 0; //Despues de no concatenar el \n y al venir este el nÃºmero de columna empieza de nuevo. Solo para comentario linea.
                        i--;
                        filaToken++;
                        break;
                    case 18:
                        if (c == 62)// >
                        {
                            estado = 20;
                            auxLexema += c;
                        }
                        else // Si no viene un > despuÃ©s del ! el comentario bloque sigue...
                        {
                            estado = 12;
                            auxLexema += c;
                        }
                        break;
                    case 19:
                        if (c == 58)// :
                        {
                            estado = 21;
                            auxLexema += c;
                        }
                        else
                        {
                            estado = 19;
                            auxLexema += c;
                        }
                        break;
                    case 20:
                        addToken(Tipo.COMENTARIO_BLOQUE, filaToken, columnaToken - auxLexema.Length);
                        i--;
                        columnaToken--;
                        break;
                    case 21:
                        if (c == 93)// ]
                        {
                            estado = 22;
                            auxLexema += c;
                        }
                        else // Si no viene un ] despuÃ©s del : el caracter especial [:Todo:] sigue...
                        {
                            estado = 19;
                            auxLexema += c;
                        }
                        break;
                    case 22:
                        addToken(Tipo.CARACTER_ESPECIAL, filaToken, columnaToken - auxLexema.Length);
                        i--;
                        columnaToken--;
                        break;
                }
                if (c == '#' && i == arrayCharDocumento.Length - 1)
                {
                    System.Windows.Forms.MessageBox.Show("Hemos concluido el anÃ¡lisis lexico satisfactoriamente");
                }
            }

            return LSalidaTokens;
        }

        public List<Token_Error> AnalizadorError()
        {
            return LErroresTokens;
        }

        private void addToken(Tipo tipo, int fila, int columna)
        {
            LSalidaTokens.Add(new Token(tipo, auxLexema, fila, columna));
            auxLexema = "";
            estado = 0;
        }

        private void addTokenError(string caracterError, TipoError tipoError, string descripcionError, int filaError, int columnaError)
        {
            LErroresTokens.Add(new Token_Error(caracterError, tipoError, descripcionError, filaError, columnaError));
            auxLexema = "";
            estado = 0;
        }
    }
}
